const path = require("path");
const webpack = require("webpack");
const HtmlWebpackPlugin = require("html-webpack-plugin");
const MiniCssExtractPlugin = require("mini-css-extract-plugin");
const CopyWebpackPlugin = require("copy-webpack-plugin");
const CleanWebpackPlugin = require("clean-webpack-plugin").CleanWebpackPlugin;

const settings = {
    distPath: path.join(__dirname, "dist"),
    publicPath: path.join(__dirname, "public"),
    srcPath: path.join(__dirname, "src"),
};

const CSSLoader = {
    loader: "css-loader",
    options: {
        /*modules: {
            compileType: "module",
            mode: "global",
            auto: false,
            exportGlobals: true,
            localIdentName: "[path][name]__[local]--[hash:base64:5]",
            localIdentContext: settings.srcPath,
            localIdentHashPrefix: "hash",
            namedExport: true,
            exportLocalsConvention: "camelCaseOnly",
            exportOnlyLocals: false,
        },*/
        importLoaders: 2,
        sourceMap: false, // turned off as causes delay
    }
}

/*const TypingsForCSSModulesLoader = {
    loader: require.resolve("typings-for-css-modules-loader"),
    options: {
        modules: true,
        importLoaders: 1,
        localIdentName: "[path][name]__[local]--[hash:base64:5]",
        namedExport: true,
        camelCase: true
    },
    sourceMap: false, // turned off as causes delay
}*/

const TypingsForCSSModulesLoader = {
    loader: require.resolve("@teamsupercell/typings-for-css-modules-loader"),
    options: {
        banner: "// autogenerated by typings-for-css-modules-loader."
    }
}

const CSSModuleLoader = {
    loader: "css-loader",
    options: {
        /*modules: {
            compileType: "module",
            mode: "local",
            auto: true,
            exportGlobals: true,
            localIdentName: "[path][name]__[local]--[hash:base64:5]",
            localIdentContext: settings.srcPath,
            localIdentHashPrefix: "hash",
            namedExport: true,
            exportLocalsConvention: "camelCaseOnly",
            exportOnlyLocals: false,
        },*/
        importLoaders: 3,
        sourceMap: false, // turned off as causes delay
    }
}

const PostCSSLoader = {
    loader: "postcss-loader",
    options: {
        postcssOptions: {
            config: path.resolve(__dirname, ".postcssrc.json"),
        },
        execute: true,
        sourceMap: false, // turned off as causes delay
    }
}

const SASSLoader = {
    loader: require.resolve("sass-loader"),
    options: {
        sourceMap: false, // turned off as causes delay
    }
}

module.exports = (env, options) => {

    const isDevMode = options.mode === "development";
    const devTool = isDevMode ? "source-map" : false;
    const styleLoader = isDevMode ? require.resolve("style-loader") : MiniCssExtractPlugin.loader;

    return {
        entry: {
            main: path.join(settings.srcPath, "index.tsx"),
        },
        output: {
            path: settings.distPath,
            filename: "[name].bundle.js",
        },
        devServer: {
            contentBase: settings.distPath,
            filename: "[name].bundle.js",
            port: 9000,
            compress: true,
            historyApiFallback: true,
            watchContentBase: true,
            progress: true,
            open: true,
            hot: true,
        },
        devtool: devTool,
        resolve: {
            extensions: [".css", ".scss", ".js", ".jsx", ".ts", ".tsx"],
        },
        module: {
            rules: [
                {
                    test: /\.html$/i,
                    use: {
                        loader: require.resolve("html-loader"),
                    }
                },
                {
                    test: /\.(js|ts)x?$/i,
                    exclude: /node_modules/,
                    use: [
                        {
                            loader: require.resolve("babel-loader"),
                        },
                    ],
                },
                {
                    test: /\.(c|sa|sc)ss$/i,
                    exclude: /\.module\.(c|sa|sc)ss$/i,
                    use: [styleLoader, CSSLoader, SASSLoader],
                },
                {
                    test: /\.module\.(c|sa|sc)ss$/i,
                    exclude: /node_modules/,
                    use: [styleLoader, CSSModuleLoader, SASSLoader],
                },
                /*{
                    test: /\.(png|svg|jpg|jpeg|gif)$/i,
                    type: 'asset/resource',
                },
                {
                    test: /\.(woff|woff2|eot|ttf|otf)$/i,
                    type: 'asset/resource',
                },*/
                {
                    test: /\.(gif|jpe?g|png|svg)$/i,
                    use: [
                        {
                            loader: require.resolve("file-loader"),
                            options: {
                                name: "[name].[ext]",
                                outputPath: "assets",
                            },
                        },
                    ]
                },
            ]
        },
        plugins: [
            new HtmlWebpackPlugin(
                {
                    template: path.join(settings.publicPath, "index.html"),
                    filename: "index.html",
                    minify: {
                        collapseWhitespace: true,
                        removeComments: true,
                        removeRedundantAttributes: true,
                        useShortDoctype: true
                    }
                },
            ),
            new MiniCssExtractPlugin(
                {
                    filename: "[name].css",
                    chunkFilename: "[id].css",
                }
            ),
            new CopyWebpackPlugin(
                {
                    patterns: [
                        {
                            from: "**/*",
                            context: settings.publicPath,
                        },
                    ]
                }
            ),
            new CleanWebpackPlugin(
                {
                    verbose: true,
                }
            ),
            new webpack.HotModuleReplacementPlugin(),
        ]
    }
};
