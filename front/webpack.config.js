const path = require("path");
const webpack = require("webpack");
const HtmlWebpackPlugin = require("html-webpack-plugin");
const MiniCssExtractPlugin = require("mini-css-extract-plugin");
const CleanWebpackPlugin = require("clean-webpack-plugin").CleanWebpackPlugin;

const settings = {
  srcPath: path.join(__dirname, "src"),
  distPath: path.join(__dirname, "dist"),
  nodeModulesPath: path.join(__dirname, "node_modules"),
  publicPath: path.join(__dirname, "public"),
};

const CSSLoader = {
  loader: "css-loader",
  options: {
    modules: {
      compileType: "module", //module | icss
      mode: "global",
      auto: false,
      /*exportGlobals: true,
      localIdentName: "[path][name]__[local]--[hash:base64:5]",
      localIdentContext: settings.srcPath,
      localIdentHashPrefix: "hash",
      namedExport: true,
      exportLocalsConvention: "camelCaseOnly",
      exportOnlyLocals: false,*/
    },
    importLoaders: 2, // 2 => postcss-loader, sass-loader
    sourceMap: false, // turned off as causes delay
  },
};

const CSSModuleLoader = {
  loader: "css-loader",
  options: {
    modules: {
      compileType: "module",
      mode: "local",
      auto: true,
      /*exportGlobals: true,
      localIdentName: "[path][name]__[local]--[hash:base64:5]",
      localIdentContext: settings.srcPath,
      localIdentHashPrefix: "hash",
      namedExport: true,
      exportLocalsConvention: "camelCaseOnly",
      exportOnlyLocals: false,*/
    },
    importLoaders: 2, // 2 => postcss-loader, sass-loader
    sourceMap: false, // turned off as causes delay
  },
};

/*const TypingsForCSSModulesLoader = {
  loader: require.resolve("typings-for-css-modules-loader"),
  options: {
    modules: true,
    importLoaders: 1,
    localIdentName: "[path][name]__[local]--[hash:base64:5]",
    namedExport: true,
    camelCase: true,
  },
  sourceMap: false, // turned off as causes delay
};*/

const TypingsForCSSModulesLoader = {
  loader: require.resolve("@teamsupercell/typings-for-css-modules-loader"),
  options: {
    banner: "// autogenerated by typings-for-css-modules-loader.",
  },
};

const PostCSSLoader = {
  loader: "postcss-loader",
  options: {
    postcssOptions: {
      config: path.resolve(__dirname, ".postcssrc.json"),
    },
    execute: true,
    sourceMap: false, // turned off as causes delay
  },
};

const SASSLoader = {
  loader: require.resolve("sass-loader"),
  options: {
    sourceMap: false, // turned off as causes delay
  },
};

module.exports = (env, options) => {
  const isDevMode = options.mode === "development";
  const devTool = isDevMode ? "source-map" : false;
  const styleLoader = isDevMode
    ? require.resolve("style-loader")
    : MiniCssExtractPlugin.loader;

  return {
    entry: {
      main: path.join(settings.srcPath, "index.tsx"),
    },
    output: {
      path: settings.distPath,
      filename: "[name].bundle.js",
    },
    devServer: {
      contentBase: settings.distPath,
      filename: "[name].bundle.js",
      port: 9000,
      /*proxy: {
        "/api": {
          changeOrigin: true,
          cookieDomainRewrite: "localhost",
          target: "http://some.endpoint.com",
        },
      },
      headers: {
        "Access-Control-Allow-Origin": "*",
        "Access-Control-Allow-Credentials": true,
      },*/
      compress: true,
      historyApiFallback: true,
      watchContentBase: true,
      progress: true,
      open: true,
      hot: true,
    },
    devtool: devTool,
    resolve: {
      extensions: [".css", ".scss", ".js", ".jsx", ".ts", ".tsx"],
      modules: [settings.srcPath, "node_modules"],
    },
    module: {
      rules: [
        {
          test: /\.html$/i,
          use: [
            {
              loader: require.resolve("html-loader"),
            },
          ],
        },
        {
          test: /\.(js|ts)x?$/i,
          exclude: /(node_modules|bower_components)/,
          use: [
            {
              loader: require.resolve("babel-loader"),
            },
          ],
        },
        {
          test: /\.(c|sa|sc|le)ss$/i,
          exclude: /.module.(c|sa|sc|le)ss$/i,
          use: [styleLoader, CSSLoader, SASSLoader],
        },
        {
          test: /\.module\.(c|sa|sc|le)ss$/i,
          exclude: /node_modules/,
          use: [styleLoader, CSSModuleLoader, SASSLoader],
        },
        {
          test: /\.(ico|gif|jpe?g|png)$/i,
          type: "asset/inline",
        },
        {
          test: /\.(woff(2)?|eot|ttf|otf|svg|)$/i,
          type: "asset/inline",
        },
      ],
    },
    plugins: [
      new HtmlWebpackPlugin({
        template: path.join(settings.publicPath, "index.html"),
        filename: "index.html",
        minify: {
          collapseWhitespace: true,
          removeComments: true,
          removeRedundantAttributes: true,
          useShortDoctype: true,
        },
      }),
      new MiniCssExtractPlugin({
        filename: "[name].css",
        chunkFilename: "[id].css",
      }),
      new CleanWebpackPlugin({
        verbose: true,
      }),
      new webpack.HotModuleReplacementPlugin(),
    ],
  };
};
